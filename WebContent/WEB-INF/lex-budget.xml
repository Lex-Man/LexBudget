<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security.xsd">
	
	<aop:aspectj-autoproxy />
	<!-- Add support for component scanning -->
	<context:component-scan base-package="org.lexusmanson.lexbudget" />
	
	<!-- Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven/>
	
	<!-- Define Spring MVC view resolver -->
	<!-- <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<b:property name="prefix" value="/WEB-INF/views/" />
		<b:property name="suffix" value=".jsp" />
	</bean>  -->
	
	<!--  Define Tiles Resolver -->
	<b:bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<b:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />	
	</b:bean>
	
	<!--  Define Tiles view resolver -->
	<b:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<b:property name="definitions">
			<b:list>
				<b:value>/WEB-INF/titles/tile-definition.xml</b:value>
			</b:list>	
		</b:property>
	</b:bean>
	
	<!-- Step 1: Define Database DataSource / connection pool -->
	<b:bean id="lexDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <b:property name="driverClass" value="org.mariadb.jdbc.Driver" />
        <b:property name="jdbcUrl" value="jdbc:mariadb://localhost:3306/lex_budget?useSSL=false" />
        <b:property name="user" value="lexbudget" />
        <b:property name="password" value="!Tulip22" /> 

        <!-- these are connection pool b:properties for C3P0 -->
        <b:property name="minPoolSize" value="5" />
        <b:property name="maxPoolSize" value="20" />
        <b:property name="maxIdleTime" value="30000" />
	</b:bean>
	
	<!-- Step 2: Setup Hibernate session factory -->
	<b:bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<b:property name="dataSource" ref="lexDataSource" />
		<b:property name="packagesToScan" value="org.lexusmanson.lexbudget.entity" />
		<b:property name="hibernateProperties">
		   <b:props>
		      <b:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</b:prop>
		      <b:prop key="hibernate.show_sql">true</b:prop>
		   </b:props>
		</b:property>
   </b:bean>
   
   <!-- Step 3: Setup Hibernate transaction manager -->
	<b:bean id="myTransactionManager"
            class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <b:property name="sessionFactory" ref="sessionFactory"/>
    </b:bean>
    
    <!-- Step 4: Enable configuration of transactional behaviour based on annotations -->
	<tx:annotation-driven transaction-manager="myTransactionManager" />

	<!--  Add support for reading web resources: css, images, js, etc ...  -->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
   
   <!-- Add message source -->
   <b:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<b:property name="basename" value="classpath:message" />
		<b:property name="defaultEncoding" value="UTF-8" />
	</b:bean>
  
    
   	<http use-expressions="true" auto-config="true">
   		<intercept-url pattern="/login/**" access="isAnonymous()" />
   		<intercept-url pattern="/resources/CSS/LexBudget.css" access="permitAll()"/>
   		<intercept-url pattern="/**" access="isAuthenticated()" />
   		<intercept-url pattern="/api/**" access="isAuthenticated()"/>
   		<logout logout-success-url="/login/login?logout"
   				logout-url="/login/logout"/>
   		<form-login login-page='/login/login'
   			login-processing-url='/login/authenticate'
   			default-target-url="/"
   			authentication-failure-url="/login/login?error=true" />
   		<logout logout-success-url="/login/login" />
   		<!--  <csrf request-matcher-ref="csrfSecurityRequestMatcher"/>	-->
   		<!-- <csrf disabled="true" />  --> 
   		
   	</http> 
	 
	<authentication-manager>
		<authentication-provider>
			<!-- <jdbc-user-service data-source-ref="lexDataSource"
				users-by-username-query="select user_name, password, enabled from USERS where user_name=?"
				authorities-by-username-query="select u.user_name, ur.authority from USERS u, USERS_ROLES ur where u.user_id = ur.user_id and u.user_name = ?"
			/> -->
			<jdbc-user-service data-source-ref="lexDataSource" />
		</authentication-provider>
	</authentication-manager>	 
	
	<b:bean id="bCrypt" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<b:constructor-arg value="10" />
	</b:bean>
	<!-- <user-service>
		<user name="Lex" password="{noop}Test" authorities="TESTER" />
	</user-service>  -->		
   
   <!--  For Spring actuator -->
   <!-- 
    <bean name="endpointHandlerAdapter" class="org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerAdapter" />
    <bean name="endpointHandlerMapping" class="org.springframework.boot.actuate.endpoint.mvc.EndpointHandlerMapping" />
    <bean class="org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration$Infob:propertiesConfiguration" />
    <bean name="beansEndpoint" class="org.springframework.boot.actuate.endpoint.BeansEndpoint" />

    <beans>
        <context:annotation-config />
        <bean name="endpointAutoConfiguration" class="org.springframework.boot.actuate.autoconfigure.EndpointAutoConfiguration"/>
    </beans>
     -->
     
</b:beans>